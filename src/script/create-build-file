#!/usr/bin/php
<?php
set_include_path(realpath(dirname(__FILE__).'/../').PATH_SEPARATOR.get_include_path());

require_once 'Ilib/Phing/BuildFile/Create.php';
$createbuildfile = new Ilib_Phing_BuildFile_Create();

function globFileList($path) {
    if(is_dir($path)) $path .= '/*';  
    $files = glob($path);
    $return = array();
    foreach ($files as $f) {
        if (is_dir($f)) { 
            $return = array_merge($return, globFileList($f));
            continue; 
        }
        $return[] = $f;
    }
    return $return;
}

fwrite(STDOUT,"Create Phing Build File to ilib packages\n");
fwrite(STDOUT,"http://public.intraface.dk\n\n");

fwrite(STDOUT,"Preparing to create build file...\n");

if (file_exists('build.xml')) {
    fwrite(STDOUT,"Found build.xml file. Reading xml...\n");
    
    $createbuildfile->readValuesFromBuildFile('build.xml');
}

// name
fwrite(STDOUT,"PACKAGE NAME\n");
if (!empty($createbuildfile->package_name)) {
    fwrite(STDOUT,'Found: '. $createbuildfile->package_name."\n");
    fwrite(STDOUT,"Enter or leave empty to use existing: ");
} else {
    fwrite(STDOUT,'Enter: ');
}
$package_name = trim(fgets(STDIN));


// version
fwrite(STDOUT,"PACKAGE VERSION (X.X.X)\n");
if (!empty($createbuildfile->package_version)) {
    fwrite(STDOUT,'Found: '. $createbuildfile->package_version."\n");
    fwrite(STDOUT,"Enter or leave empty to use existing: ");
} else {
    fwrite(STDOUT,'Enter: ');
}
$package_version = trim(fgets(STDIN));

// stability
fwrite(STDOUT,"PACKAGE STABILITY (alpha, beta, stable)\n");
if (!empty($createbuildfile->package_stability)) {
    fwrite(STDOUT,'Found: '. $createbuildfile->package_stability."\n");
    fwrite(STDOUT,"Enter or leave empty to use existing: ");
} else {
    fwrite(STDOUT,'Enter: ');
}
$package_stability = trim(fgets(STDIN));

// Summary
fwrite(STDOUT,"PACKAGE SUMMARY\n");
if (!empty($createbuildfile->package_summary)) {
    fwrite(STDOUT,'Found: '. $createbuildfile->package_summary."\n");
    fwrite(STDOUT,"Enter or leave empty to use existing: ");
} else {
    fwrite(STDOUT,'Enter: ');
}
$package_summary = trim(fgets(STDIN));

// description
fwrite(STDOUT,"PACKAGE DESCRIPTION\n");
if (!empty($createbuildfile->package_description)) {
    fwrite(STDOUT,'Found: '. $createbuildfile->package_description."\n");
    fwrite(STDOUT,"Enter or leave empty to use existing: ");
} else {
    fwrite(STDOUT,'Enter: ');
}
$package_description = trim(fgets(STDIN));

// release notes
fwrite(STDOUT,"RELEASE_NOTES\n");
if (!empty($createbuildfile->release_notes)) {
    fwrite(STDOUT,'Found: '. $createbuildfile->release_notes."\n");
    fwrite(STDOUT,"Enter or leave empty to use existing: ");
} else {
    fwrite(STDOUT,'Enter: ');
}
$release_notes = trim(fgets(STDIN));

if (!empty($package_name)) $createbuildfile->package_name = $package_name;
if (!empty($package_version)) $createbuildfile->package_version = $package_version;
if (!empty($package_stability)) $createbuildfile->package_stability = $package_stability;
if (!empty($package_summary)) $createbuildfile->package_summary = $package_summary;
if (!empty($package_description)) $createbuildfile->package_description = $package_description;
if (!empty($release_notes)) $createbuildfile->release_notes = $release_notes;

$replacements = $createbuildfile->getReplacements();
$createbuildfile->clearReplacements();

$i = 0;
while(true) {
    fwrite(STDOUT,"\n".'REPLACEMENT '.($i+1)."\n");
    
    fwrite(STDOUT,"PATH\n");
    if (!empty($replacements[$i]) && !empty($replacements[$i]['path'])) {
        fwrite(STDOUT,'Found: '. $replacements[$i]['path']."\n");
        fwrite(STDOUT,"Enter name or leave empty to use existing or enter '/delete' to remove: ");
    } else {
        fwrite(STDOUT,'Enter or leave empty if no more replacements: ');
    }
    $replacement_path = trim(fgets(STDIN));
    
    // if edditing existing replacement an leaving it empty it should be replaced by the existing.
    if (!empty($replacements[$i]) && !empty($replacements[$i]['path']) && empty($replacement_path)) {
        $replacement_path = $replacements[$i]['path'];
    }
    
    if (!empty($replacement_path) && $replacement_path != "/delete") {
        
        fwrite(STDOUT,"TYPE (php-const, pear-config, package-info)\n");
        if (!empty($replacements[$i]) && !empty($replacements[$i]['type'])) {
            fwrite(STDOUT,'Found: '. $replacements[$i]['type']."\n");
            fwrite(STDOUT,"Enter or leave empty to use existing: ");
        } else {
            fwrite(STDOUT,'Enter: ');
        }
        $replacement_type = trim(fgets(STDIN));
        
        if (!empty($replacements[$i]) && !empty($replacements[$i]['type']) && empty($replacement_type)) {
            $replacement_type = $replacements[$i]['type'];
        }
    
        fwrite(STDOUT,"FROM (e.g. @data_dir@) \n");
        if (!empty($replacements[$i]) && !empty($replacements[$i]['from'])) {
            fwrite(STDOUT,'Found: '. $replacements[$i]['from']."\n");
            fwrite(STDOUT,"Enter or leave empty to use existing: ");
        } else {
            fwrite(STDOUT,'Enter: ');
        }
        $replacement_from = trim(fgets(STDIN));
        if (!empty($replacements[$i]) && !empty($replacements[$i]['from']) && empty($replacement_from)) {
            $replacement_from = $replacements[$i]['from'];
        }
    
        fwrite(STDOUT,"TO (e.g. data_dir)\n");
        if (!empty($replacements[$i]) && !empty($replacements[$i]['to'])) {
            fwrite(STDOUT,'Found: '. $replacements[$i]['to']."\n");
            fwrite(STDOUT,"Enter or leave empty to use existing: ");
        } else {
            fwrite(STDOUT,'Enter: ');
        }
        $replacement_to = trim(fgets(STDIN));
        if (!empty($replacements[$i]) && !empty($replacements[$i]['to']) && empty($replacement_to)) {
            $replacement_to = $replacements[$i]['to'];
        }
    
        $createbuildfile->addReplacement($replacement_path,  $replacement_type, $replacement_from, $replacement_to);
    } else {
        // only if there is no more existing dependencies we exit.
        if (empty($replacements[($i+1)])) {
            break;
        }
    }
    $i++;
}

$excludes = $createbuildfile->getExcludes();
$createbuildfile->clearExcludes();

$i = 0;
while(true) {
    fwrite(STDOUT,"\n".'EXCLUDE '.($i+1)."\n");
    fwrite(STDOUT,"(e.g. www/config.local.php)\n");
    
    fwrite(STDOUT,"PATH\n");
    if (!empty($excludes[$i])) {
        fwrite(STDOUT,'Found: '. $excludes[$i]."\n");
        fwrite(STDOUT,"Enter path or leave empty to use existing or enter '/delete' to remove: ");
    } else {
        fwrite(STDOUT,'Enter or leave empty if no more excludes: ');
    }
    $exclude = trim(fgets(STDIN));
    // if edditing existing replacement an leaving it empty it should be replaced by the existing.
    if (!empty($excludes[$i]) && empty($exclude)) {
        $exclude = $excludes[$i];
    }
    
    if (!empty($exclude) && $exclude != "/delete") {
        $createbuildfile->addExclude($exclude);
    } else {
        // only if there is no more existing dependencies we exit.
        if (empty($excludes[($i+1)])) {
            break;
        }
    }
    $i++;
}

$dependencies = $createbuildfile->getDependencies();
$createbuildfile->clearDependencies();

$i = 0;
while(true) {
    fwrite(STDOUT,"\n".'DEPENDENCY '.($i+1)."\n");
    
    fwrite(STDOUT,"NAME\n");
    if (!empty($dependencies[$i]) && !empty($dependencies[$i]['name'])) {
        fwrite(STDOUT,'Found: '. $dependencies[$i]['name']."\n");
        fwrite(STDOUT,"Enter name or leave empty to use existing or enter '/delete' to remove: ");
    } else {
        fwrite(STDOUT,'Enter or leave empty if no more dependencies: ');
    }
    $dependency_name = trim(fgets(STDIN));
    
    // if edditing existing dependency an leaving it empty it should be replaced by the existing.
    if (!empty($dependencies[$i]) && !empty($dependencies[$i]['name']) && empty($dependency_name)) {
        $dependency_name = $dependencies[$i]['name'];
    }
    
    if (!empty($dependency_name) && $dependency_name != "/delete") {
        
        fwrite(STDOUT,"CHANNEL\n");
        if (!empty($dependencies[$i]) && !empty($dependencies[$i]['channel'])) {
            fwrite(STDOUT,'Found: '. $dependencies[$i]['channel']."\n");
            fwrite(STDOUT,"Enter or leave empty to use existing: ");
        } else {
            fwrite(STDOUT,'Enter: ');
        }
        $dependency_channel = trim(fgets(STDIN));
        
        if (!empty($dependencies[$i]) && !empty($dependencies[$i]['channel']) && empty($dependency_channel)) {
            $dependency_channel = $dependencies[$i]['channel'];
        }
        
        require_once 'PEAR/PackageUpdate.php';
        $ppu = PEAR_PackageUpdate::factory('Cli', $dependency_name, $dependency_channel);
        if($ppu != false) {
            $installed = $ppu->getInstalledRelease();
            if($installed == false) {
                fwrite(STDOUT,"This package is not installed on you locale machine!\n");
            } else {
                fwrite(STDOUT,"Your installed version is: ".$installed['state']." ".$installed['version']."\n");
            }
            
            fwrite(STDOUT,"Check for latest release? (y or enter): ");
            $answer = trim(fgets(STDIN));
            if($answer == 'y' || $answer == 'yes') {
                fwrite(STDOUT,"Fetching latest release. Please wait...\n");
                $release = $ppu->getLatestRelease();
                if($release != false) {
                    fwrite(STDOUT,"LATEST RELEASE: ".$release['state']." ".$release['version']."\n");
                }
            }
        }
    
        fwrite(STDOUT,"MINIMUM VERSION (X.X.X)\n");
        if (!empty($dependencies[$i]) && !empty($dependencies[$i]['minimum_version'])) {
            fwrite(STDOUT,'Found: '. $dependencies[$i]['minimum_version']."\n");
            fwrite(STDOUT,"Enter or leave empty to use existing: ");
        } else {
            fwrite(STDOUT,'Enter: ');
        }
        $dependency_minimum_version = trim(fgets(STDIN));
        if (!empty($dependencies[$i]) && !empty($dependencies[$i]['minimum_version']) && empty($dependency_minimum_version)) {
            $dependency_minimum_version = $dependencies[$i]['minimum_version'];
        }
    
        fwrite(STDOUT,"RECOMMENDED VERSION (X.X.X)\n");
        if (!empty($dependencies[$i]) && !empty($dependencies[$i]['recommended_version'])) {
            fwrite(STDOUT,'Found: '. $dependencies[$i]['recommended_version']."\n");
            fwrite(STDOUT,"Enter or leave empty to use existing: ");
        } else {
            fwrite(STDOUT,'Enter: ');
        }
        $dependency_recommended_version = trim(fgets(STDIN));
        if (!empty($dependencies[$i]) && !empty($dependencies[$i]['recommended_version']) && empty($dependency_recommended_version)) {
            $dependency_recommended_version = $dependencies[$i]['recommended_version'];
        }
    
        $createbuildfile->addDependency($dependency_name,  $dependency_channel, $dependency_recommended_version, $dependency_minimum_version);
    } else {
        // only if there is no more existing dependencies we exit.
        if (empty($dependencies[($i+1)])) {
            break;
        }
    }
    $i++;
}


$createbuildfile->clearTests();

if (is_dir('tests')) {
    
    $test_dir = 'tests';
    $count_tests = 0;
    $found_alltests = false;
    
    fwrite(STDOUT,"Scanning test dir for tests... (need to end with *Test.php)\n");
    foreach (scandir($test_dir) as $test) {
        if (!strcmp(substr($test, 0, 1), '.' )) {
            continue;
        }
        if (is_file($test_dir.DIRECTORY_SEPARATOR.$test)) {
            if($test == 'AllTests.php') {
                // we clear all tests and only adds this one
                $createbuildfile->clearTests();
                $createbuildfile->addTest(substr($test, 0, strlen($test) - 4));
                $found_alltests = true;
                break;
            }
            elseif(substr($test, strlen($test) - 8) == 'Test.php') {
                $createbuildfile->addTest(substr($test, 0, strlen($test) - 4));
                $count_tests++;
            }
        }
    }
    
    if($found_alltests == true) {
        fwrite(STDOUT,"Found a AllTests.php test suite. Make sure it containes all other tests.\n");
    }
    elseif ($count_tests == 0) {
        fwrite(STDOUT,"Found no tests\n");
    } else {
       fwrite(STDOUT,"Found ".$count_tests." test(s)\n"); 
    }
}

// Build role list
$current_dir = getcwd();
chdir('src/');
$excludes = array();
foreach($createbuildfile->getExcludes() AS $exclude) {
    $excludes = array_merge($excludes, globFileList($exclude));
}

$roles = array('script', 'doc', 'www');
foreach($roles AS $role) {
    if(is_dir($role)) {
        $files = globFileList($role);
        foreach($files AS $file) {
            if(!in_array($file, $excludes)) {
                $createbuildfile->addFileRole($file, $role);
            }
        }
    }
}
chdir($current_dir);

file_put_contents('build.xml', $createbuildfile->create());
fwrite(STDOUT, "build.xml file has been written\n\n");


/**
 * Properties file.
 */
fwrite(STDOUT,"Preparing to create properties file...\n");

require_once 'Ilib/Phing/BuildFile/CreateProperties.php';
$properties = new Ilib_Phing_BuildFile_CreateProperties();

if (file_exists('build.properties')) {
    fwrite(STDOUT,"Found build.properties file. Reading file...\n");
    
    $properties->readValuesFromBuildFile('build.properties');
}

// pear username
fwrite(STDOUT,"PEAR CHANNEL USERNAME\n");
if (!empty($properties->pear_channel_username)) {
    fwrite(STDOUT,'Found: '. $properties->pear_channel_username."\n");
    fwrite(STDOUT,"Enter or leave empty to use existing: ");
} else {
    fwrite(STDOUT,'Enter: ');
}
$pear_channel_username = trim(fgets(STDIN));

// pear password
fwrite(STDOUT,"PEAR CHANNEL PASSWORD\n");
if (!empty($properties->pear_channel_password)) {
    fwrite(STDOUT,'Found: '. $properties->pear_channel_password."\n");
    fwrite(STDOUT,"Enter or leave empty to use existing: ");
} else {
    fwrite(STDOUT,'Enter: ');
}
$pear_channel_password = trim(fgets(STDIN));

// ftp user
fwrite(STDOUT,"FTP USER\n");
if (!empty($properties->ftp_user)) {
    fwrite(STDOUT,'Found: '. $properties->ftp_user."\n");
    fwrite(STDOUT,"Enter or leave empty to use existing: ");
} else {
    fwrite(STDOUT,'Enter: ');
}
$ftp_user = trim(fgets(STDIN));

// ftp password
fwrite(STDOUT,"FTP PASSWORD\n");
if (!empty($properties->ftp_password)) {
    fwrite(STDOUT,'Found: '. $properties->ftp_password."\n");
    fwrite(STDOUT,"Enter or leave empty to use existing: ");
} else {
    fwrite(STDOUT,'Enter: ');
}
$ftp_password = trim(fgets(STDIN));

if (!empty($pear_channel_username)) {
    $properties->pear_channel_username = $pear_channel_username;
}
if (!empty($pear_channel_password)) {
    $properties->pear_channel_password = $pear_channel_password;
}
if (!empty($ftp_user)) {
    $properties->ftp_user = $ftp_user;
}
if (!empty($ftp_password)) {
    $properties->ftp_password = $ftp_password;
}

file_put_contents('build.properties', $properties->create());
fwrite(STDOUT, "build.properties file has been written\n\n");

fwrite(STDOUT, "Enjoy your day.\n");